
import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.en.Then;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;

public class ProxyStepDefinitions {
    private WebDriver driver;
    private ProxyPage proxyPage;
    private ExcelUtils excel;
    private final String filePath = "ProxyDataSheet.xlsx";

    @Before
    public void setUp() throws IOException {
        driver = new ChromeDriver();
        driver.get("URL_OF_THE_APPLICATION");
        proxyPage = new ProxyPage(driver);
        excel = new ExcelUtils(filePath);
    }

    @DataProvider(name = "proxyTestData")
    public Iterator<Object[]> getTestData() throws IOException {
        excel = new ExcelUtils(filePath);
        List<Object[]> testData = new ArrayList<>();
        Map<String, Integer> columnIndexMap = excel.getColumnIndexMap();

        for (int i = 1; i < excel.getRowCount(); i++) {
            if ("N".equalsIgnoreCase(excel.getCellData(i, columnIndexMap.get("Skip")))) {
                testData.add(new Object[]{i, excel.getCellData(i, columnIndexMap.get("Proxy"))});
            }
        }
        return testData.iterator();
    }

    @Test(dataProvider = "proxyTestData")
    public void executeProxyTests(int rowIndex, String proxyUser) throws IOException {
        Map<String, Integer> columnIndexMap = excel.getColumnIndexMap();
        Map<String, String> results = new LinkedHashMap<>();

        for (String columnName : columnIndexMap.keySet()) {
            if (columnName.startsWith("IN-")) {
                String outputColumn = "O-" + columnName.substring(3);
                String inputValue = excel.getCellData(rowIndex, columnIndexMap.get(columnName));
                boolean result = proxyPage.checkElement(columnName.substring(3), inputValue);
                results.put(outputColumn, result ? "Pass" : "Fail");
                results.put("Comments", result ? "Validation successful" : "Validation failed");
            }
        }
        excel.setRowData(rowIndex, results);
    }

    @Then("I save the results back to the excel file")
    public void saveResults() throws IOException {
        excel.saveAndClose();
    }

    @After
    public void tearDown() {
        driver.quit();
    }
}

class ProxyPage {
    private final WebDriver driver;

    public ProxyPage(WebDriver driver) {
        this.driver = driver;
    }

    public boolean checkElement(String fieldName, String expectedValue) {
        try {
            WebElement element = driver.findElement(By.name(fieldName));
            return element.getText().trim().equalsIgnoreCase(expectedValue.trim());
        } catch (Exception e) {
            return false;
        }
    }
}

class ExcelUtils {
    private final String filePath;
    private final Workbook workbook;
    private final Sheet sheet;

    public ExcelUtils(String filePath) throws IOException {
        this.filePath = filePath;
        FileInputStream fis = new FileInputStream(filePath);
        workbook = new XSSFWorkbook(fis);
        sheet = workbook.getSheetAt(0);
    }

    public int getRowCount() {
        return sheet.getPhysicalNumberOfRows();
    }

    public Map<String, Integer> getColumnIndexMap() {
        Map<String, Integer> columnIndexMap = new LinkedHashMap<>();
        Row headerRow = sheet.getRow(0);
        for (Cell cell : headerRow) {
            columnIndexMap.put(cell.getStringCellValue(), cell.getColumnIndex());
        }
        return columnIndexMap;
    }

    public String getCellData(int rowIndex, int colIndex) {
        Row row = sheet.getRow(rowIndex);
        Cell cell = row.getCell(colIndex);
        return (cell != null) ? cell.toString() : "";
    }

    public void setRowData(int rowIndex, Map<String, String> data) {
        Map<String, Integer> columnIndexMap = getColumnIndexMap();
        Row row = sheet.getRow(rowIndex);
        if (row == null) row = sheet.createRow(rowIndex);

        for (Map.Entry<String, String> entry : data.entrySet()) {
            Integer colIndex = columnIndexMap.get(entry.getKey());
            if (colIndex != null) {
                Cell cell = row.getCell(colIndex, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                cell.setCellValue(entry.getValue());
            }
        }
    }

    public void saveAndClose() throws IOException {
        FileOutputStream fos = new FileOutputStream(filePath);
        workbook.write(fos);
        fos.close();
        workbook.close();
    }
}
Answer
The Java code you've provided implements a Cucumber-based automation framework using Selenium and Apache POI for Excel handling. Here's a breakdown of each component, its purpose, and some suggestions for improvements or additional features you might consider.
Code Breakdown
Imports
The code uses multiple libraries:
Cucumber for behavior-driven development (BDD) testing.
Selenium WebDriver for browser automation.
Apache POI for reading and writing Excel files.
TestNG for data-driven testing via the @DataProvider annotation.
Class Structure
ProxyStepDefinitions
This class contains the Cucumber step definitions. It handles the setup and teardown of the Selenium WebDriver, reads input from an Excel file, executes the test cases, and writes the results back to the Excel file.
ProxyPage
This class encapsulates the functionality to interact with the web application, specifically checking whether a specified element matches an expected value.
ExcelUtils
A utility class for handling Excel operations, including reading data, writing results, and managing the workbook and sheet.
Key Methods
setUp(): Initializes the WebDriver and opens the target URL.
getTestData(): Reads data from the Excel file, filtering out rows marked to be skipped.
executeProxyTests(): Performs the validation for each test case and stores the results.
saveResults(): Saves the result of the tests back into the Excel file.
tearDown(): Closes the WebDriver.
Excel Handling
The ExcelUtils class is designed to manage Excel operations efficiently, including dynamic row and column handling based on a header.
Suggestions for Improvement
1. Error Handling
Enhanced Exception Management: Currently, exceptions are caught but not logged. Consider adding a logging mechanism to capture errors to troubleshoot easily.
Graceful Failures: Provide more informative messages if an Excel file cannot be found or opened.
2. Configuration Management
External Configuration: Instead of hardcoding the file path and the URL, consider using a properties file or environment variables to manage configurations better. This increases flexibility and maintainability.
3. Test Reporting
Integration with Reporting Tools: Implement or integrate a reporting tool (like ExtentReports or Allure) to generate more comprehensive test reports, summarizing test results in a more structured format.
4. Parallel Execution
Enable Parallel Execution: If you have many test cases, consider enabling parallel execution to speed up the testing process.
5. Test Data Management
Dynamic Test Data: Consider adding functionality to read and write test data from other sources (like databases or JSON files) for more complex testing scenarios.
6. Browser Configuration
WebDriver Configuration: Allow for more configuration options (like headless mode, etc.) when initializing the WebDriver.
Conclusion
This code provides a solid foundation for automated testing using Selenium and Excel. By implementing some of the suggested improvements, you can enhance reliability, maintainability, and overall functionality. Happy coding, and best of luck with your automation endeavors!
Analyse the code and explain in detail what the code is performing a
Answer
The provided code is an implementation of a testing framework utilizing Cucumber, Selenium WebDriver, and Apache POI to automate the testing of web applications. It specifically focuses on testing elements related to proxies, as inferred from its naming conventions and structure. Below is a comprehensive analysis of what each part of the code does.
Detailed Code Analysis
Class: ProxyStepDefinitions
This class serves as the main entry point for executing the automated tests according to the specifications defined in your Cucumber feature files.
Dependencies
Selenium WebDriver is used for browser automation.
Apache POI is used to handle Excel files.
Cucumber Framework is used to define behavior-driven tests.
Fields
WebDriver driver: This object will control the browser.
ProxyPage proxyPage: This object encapsulates interactions with the specific "proxy" page of the application under test.
ExcelUtils excel: This object is used for reading from and writing to the Excel data sheet.
String filePath: This holds the path to the Excel file containing test data.
Method: setUp()
java
@Before
public void setUp() throws IOException {
    driver = new ChromeDriver();
    driver.get("URL_OF_THE_APPLICATION");
    proxyPage = new ProxyPage(driver);
    excel = new ExcelUtils(filePath);
}
Purpose: Initializes the testing environment before each scenario runs.
Actions:
Launches a Chrome browser.
Navigates to the specified URL of the application.
Initializes the ProxyPage and ExcelUtils for further operations.
Method: getTestData()
java
@DataProvider(name = "proxyTestData")
public Iterator<Object[]> getTestData() throws IOException {
    excel = new ExcelUtils(filePath);
    List<Object[]> testData = new ArrayList<>();
    Map<String, Integer> columnIndexMap = excel.getColumnIndexMap();

    for (int i = 1; i < excel.getRowCount(); i++) {
        if ("N".equalsIgnoreCase(excel.getCellData(i, columnIndexMap.get("Skip")))) {
            testData.add(new Object[]{i, excel.getCellData(i, columnIndexMap.get("Proxy"))});
        }
    }
    return testData.iterator();
}
Purpose: Provides test data for the test methods using TestNG's data provider functionality.
Actions:
Initializes ExcelUtils to read data from the specified Excel file.
Iterates through the rows in the Excel sheet, skipping any rows marked with "Y" in the "Skip" column.
Collects the index and proxy user data for each test case into a list, which is then returned as an iterator.
Method: executeProxyTests()
java
@Test(dataProvider = "proxyTestData")
public void executeProxyTests(int rowIndex, String proxyUser) throws IOException {
    Map<String, Integer> columnIndexMap = excel.getColumnIndexMap();
    Map<String, String> results = new LinkedHashMap<>();

    for (String columnName : columnIndexMap.keySet()) {
        if (columnName.startsWith("IN-")) {
            String outputColumn = "O-" + columnName.substring(3);
            String inputValue = excel.getCellData(rowIndex, columnIndexMap.get(columnName));
            boolean result = proxyPage.checkElement(columnName.substring(3), inputValue);
            results.put(outputColumn, result ? "Pass" : "Fail");
            results.put("Comments", result ? "Validation successful" : "Validation failed");
        }
    }
    excel.setRowData(rowIndex, results);
}
Purpose: Executes individual test scenarios using the data provided by the getTestData() method.
Actions:
Maps the column names to their indices.
For each input column that starts with "IN-", it retrieves the corresponding input value.
It invokes the checkElement method on the proxyPage object to verify if the web element matches the expected input.
Records the result ("Pass" or "Fail") and comments in a results map.
Calls setRowData to write the test results back to the Excel file for the current row.
Method: saveResults()
java
@Then("I save the results back to the excel file")
public void saveResults() throws IOException {
    excel.saveAndClose();
}
Purpose: Finalizes the results of the tests by saving them back into the Excel file.
Actions: Calls the saveAndClose method of ExcelUtils to persist any changes made to the Excel file.
Method: tearDown()
java
@After
public void tearDown() {
    driver.quit();
}
Purpose: Cleans up the testing environment after each scenario.
Actions: Closes the browser instance to free up resources.
Class: ProxyPage
This class contains methods related to interactions with web elements specific to the proxy page.
Constructor
java
public ProxyPage(WebDriver driver) {
    this.driver = driver;
}
Purpose: Initializes the ProxyPage class with a WebDriver instance.
Method: checkElement()
java
public boolean checkElement(String fieldName, String expectedValue) {
    try {
        WebElement element = driver.findElement(By.name(fieldName));
        return element.getText().trim().equalsIgnoreCase(expectedValue.trim());
    } catch (Exception e) {
        return false;
    }
}
Purpose: Checks if a web element identified by its name matches the expected value.
Actions:
Locates an element on the page by name.
Compares the text of the element with the expected value after trimming whitespace.
Returns true if the values match, otherwise returns false.
Class: ExcelUtils
This utility class is responsible for reading from and writing to the Excel spreadsheet.
Constructor
java
public ExcelUtils(String filePath) throws IOException {
    this.filePath = filePath;
    FileInputStream fis = new FileInputStream(filePath);
    workbook = new XSSFWorkbook(fis);
    sheet = workbook.getSheetAt(0);
}
Purpose: Initializes the utility to handle Excel files.
Actions: Opens an Excel workbook and references the first sheet.
Method: getRowCount()
java
public int getRowCount() {
    return sheet.getPhysicalNumberOfRows();
}
Purpose: Returns the number of physical rows present in the sheet.
Method: getColumnIndexMap()
java
public Map<String, Integer> getColumnIndexMap() {
    Map<String, Integer> columnIndexMap = new LinkedHashMap<>();
    Row headerRow = sheet.getRow(0);
    for (Cell cell : headerRow) {
        columnIndexMap.put(cell.getStringCellValue(), cell.getColumnIndex());
    }
    return columnIndexMap;
}
Purpose: Creates a map of column names to their corresponding indices based on the first row (header row).
Actions: Iterates over the header row's cells, storing the name and index in a map.
Method: getCellData()
java
public String getCellData(int rowIndex, int colIndex) {
    Row row = sheet.getRow(rowIndex);
    Cell cell = row.getCell(colIndex);
    return (cell != null) ? cell.toString() : "";
}
Purpose: Retrieves data from a specific cell based on row and column indices.
Returns: The cell's string representation or an empty string if the cell is null.
Method: setRowData()
java
public void setRowData(int rowIndex, Map<String, String> data) {
    Map<String, Integer> columnIndexMap = getColumnIndexMap();
    Row row = sheet.getRow(rowIndex);
    if (row == null) row = sheet.createRow(rowIndex);

    for (Map.Entry<String, String> entry : data.entrySet()) {
        Integer colIndex = columnIndexMap.get(entry.getKey());
        if (colIndex != null) {
            Cell cell = row.getCell(colIndex, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
            cell.setCellValue(entry.getValue());
        }
    }
}
Purpose: Writes data into a specific row in the Excel file, creating the row if it does not already exist.
Actions: Loops over the provided data, locating the correct cell in the row and setting its value.
Method: saveAndClose()
java
public void saveAndClose() throws IOException {
    FileOutputStream fos = new FileOutputStream(filePath);
    workbook.write(fos);
    fos.close();
    workbook.close();
}
Purpose: Saves any changes made to the workbook and closes the file.
Actions: Writes the current workbook to the specified file path, closes the output stream, and releases resources.
Conclusion
In summary, this code establishes a comprehensive framework for automated testing focused on proxy functionalities within a web application. By leveraging Selenium for browser interactions, Cucumber for behavior-driven development, and Apache POI for data management, it allows testers to efficiently execute, validate, and record the results of various test cases defined in Excel spreadsheets.
The structure is modular, separating concerns into different classes, which enhances maintainability and scalability. It effectively enables data-driven testing, allowing various test scenarios to be executed based on varying input data while documenting outcomes directly in an Excel file for review and analysis.
generate the output excel file for the above code
Answer
To generate the output Excel file that would be produced by the provided Java code using Apache POI, we need to understand the structure of the input Excel, the data held within it, and how results from test executions are recorded back into it. Here's how you can set up a mock input Excel file and a representation of the output Excel file.
Input Excel Structure
Before running the tests, you need an Excel file which we will call ProxyDataSheet.xlsx that contains the following structure:
Input Sheet Structure (Sheet1)
A (Skip)	B (Proxy)	C (IN-Field1)	D (IN-Field2)	...
Skip	Proxy	IN-Field1	IN-Field2	...
N	user1	expectedValue1	expectedValue2	...
N	user2	expectedValue3	expectedValue4	...
Y	user3	expectedValue5	expectedValue6	...
N	user4	expectedValue7	expectedValue8	...
Explanation of Columns
Column A ("Skip"): A flag indicating whether to skip the row ("N" for no, "Y" for yes).
Column B ("Proxy"): Represents the user associated with the proxy.
Columns C, D, ... ("IN-Field1", "IN-Field2", ...): Inputs that the automated tests will check against the web application elements.
Output Excel Structure
After the tests are executed, results are saved back to the same Excel sheet, with new output columns added.
Output Sheet Structure (Sheet1)
A (Skip)	B (Proxy)	C (IN-Field1)	D (IN-Field2)	E (O-Field1)	F (O-Field2)	Comments
Skip	Proxy	IN-Field1	IN-Field2	O-Field1	O-Field2	Comments
N	user1	expectedValue1	expectedValue2	Pass	Fail	Validation failed
N	user2	expectedValue3	expectedValue4	Fail	Pass	Validation successful
Y	user3	expectedValue5	expectedValue6			
N	user4	expectedValue7	expectedValue8	Pass	Pass	Validation successful
Explanation of Output Columns
Columns E, F, ... ("O-Field1", "O-Field2", ...): These columns contain the test results for each corresponding input field. The prefix "O-" indicates that these are output values.
Column "Comments": This contains messages indicating whether the validation for each field was successful or failed.
Generating the Excel File Programmatically
If you would like to generate an Excel file programmatically before running your tests, you can use the following Java code snippet utilizing Apache POI to create ProxyDataSheet.xlsx:
java
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileOutputStream;
import java.io.IOException;

public class CreateExcelFile {
    public static void main(String[] args) throws IOException {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Proxy Tests");

        // Create header row
        Row headerRow = sheet.createRow(0);
        headerRow.createCell(0).setCellValue("Skip");
        headerRow.createCell(1).setCellValue("Proxy");
        headerRow.createCell(2).setCellValue("IN-Field1");
        headerRow.createCell(3).setCellValue("IN-Field2");
        // Add more headers as needed

        // Create test data rows
        Object[][] testData = {
            {"N", "user1", "expectedValue1", "expectedValue2"},
            {"N", "user2", "expectedValue3", "expectedValue4"},
            {"Y", "user3", "expectedValue5", "expectedValue6"},
            {"N", "user4", "expectedValue7", "expectedValue8"},
        };

        int rowNum = 1;
        for (Object[] rowData : testData) {
            Row row = sheet.createRow(rowNum++);
            int colNum = 0;
            for (Object field : rowData) {
                row.createCell(colNum++).setCellValue(field.toString());
            }
        }

        // Write the output to an Excel file
        try (FileOutputStream fileOut = new FileOutputStream("ProxyDataSheet.xlsx")) {
            workbook.write(fileOut);
        }

        workbook.close();
    }
}
Run the Code
Compile and run the CreateExcelFile class.
This will generate an Excel file named ProxyDataSheet.xlsx with the specified input structure.
You can then use your original testing code to manipulate this Excel file according to the logic described.
Conclusion
This approach sets up a clear process for both generating an input Excel file and understanding how the output might be structured after executing the tests. The output will provide valuable feedback on the success or failure of each validation performed by your automation framework.
Generate the above selenium POM structure framework for the attached excel file with the data provider concept and enhance the above codes
Sources
Answer
To implement a Selenium Page Object Model (POM) structure based on the provided Excel file ProxyDataSheet.xlsx, we will outline how to enhance the existing code by making it more modular and following the POM design pattern. The POM design pattern helps keep the test code clean, maintainable, and reusable by separating the page interactions from the test logic.
Overview of Enhancements
POM Structure: We'll create separate classes for the page objects corresponding to the web pages being tested. We'll have methods in these classes that represent actions that can be performed on the page.
Data Provider Concept: The test cases will use TestNG's data provider to read data from the Excel sheet.
Refactor Excel Utility: Improve the Excel utility to better handle reading and writing operations based on the new structure of the Excel file.
Testing Framework Structure: Organize the code into appropriate packages and classes following Java conventions.
Proposed Project Structure
text
src
├── main
│   └── java
│       └── com
│           └── example
│               ├── pages
│               │   └── ProxyPage.java
│               ├── utils
│               │   └── ExcelUtils.java
│               └── tests
│                   └── ProxyTest.java
└── resources
    └── ProxyDataSheet.xlsx
Implementation Details
1. ProxyPage.java
This class will contain methods to interact with the web page.
java
package com.example.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

public class ProxyPage {
    private WebDriver driver;

    public ProxyPage(WebDriver driver) {
        this.driver = driver;
    }

    public void enterAccountName(String accountName) {
        WebElement accountNameField = driver.findElement(By.name("accountName"));
        accountNameField.clear();
        accountNameField.sendKeys(accountName);
    }

    public boolean verifyUpcomingVisit(String expectedVisit) {
        WebElement upcomingVisitsElement = driver.findElement(By.id("upcomingVisits"));
        return upcomingVisitsElement.getText().trim().equalsIgnoreCase(expectedVisit.trim());
    }

    // Additional methods for other fields can be added here
}
2. ExcelUtils.java
We will enhance the Excel utility to better handle reading the new structure.
java
package com.example.utils;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

public class ExcelUtils {
    private Workbook workbook;
    private Sheet sheet;
    private final String filePath;

    public ExcelUtils(String filePath) throws IOException {
        this.filePath = filePath;
        FileInputStream fis = new FileInputStream(filePath);
        workbook = new XSSFWorkbook(fis);
        sheet = workbook.getSheetAt(0);
    }

    public int getRowCount() {
        return sheet.getPhysicalNumberOfRows();
    }

    public Map<String, Object> getRowData(int rowIndex) {
        Map<String, Object> rowData = new LinkedHashMap<>();
        Row row = sheet.getRow(rowIndex);
        int columnCount = row.getPhysicalNumberOfCells();

        for (int i = 0; i < columnCount; i++) {
            Cell cell = row.getCell(i);
            rowData.put(getHeaderCellValue(i), cell != null ? cell.toString() : "");
        }
        return rowData;
    }

    private String getHeaderCellValue(int columnIndex) {
        return sheet.getRow(0).getCell(columnIndex).getStringCellValue();
    }

    public void setCellData(int rowIndex, String columnName, String value) {
        Row row = sheet.getRow(rowIndex);
        int colIndex = getColumnIndex(columnName);
        if (row == null) row = sheet.createRow(rowIndex);
        Cell cell = row.getCell(colIndex, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
        cell.setCellValue(value);
    }

    private int getColumnIndex(String columnName) {
        Row headerRow = sheet.getRow(0);
        for (int i = 0; i < headerRow.getPhysicalNumberOfCells(); i++) {
            if (headerRow.getCell(i).getStringCellValue().equalsIgnoreCase(columnName)) {
                return i;
            }
        }
        return -1; // Column not found
    }

    public void saveAndClose() throws IOException {
        try (FileOutputStream fos = new FileOutputStream(filePath)) {
            workbook.write(fos);
        } finally {
            workbook.close();
        }
    }
}
3. ProxyTest.java
This will be the main test class that uses the Excel data provider.
java
package com.example.tests;

import com.example.pages.ProxyPage;
import com.example.utils.ExcelUtils;
import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.en.Then;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.IOException;

public class ProxyTest {
    private WebDriver driver;
    private ProxyPage proxyPage;
    private ExcelUtils excel;
    private final String filePath = "ProxyDataSheet.xlsx";

    @Before
    public void setUp() throws IOException {
        driver = new ChromeDriver();
        driver.get("URL_OF_THE_APPLICATION");
        proxyPage = new ProxyPage(driver);
        excel = new ExcelUtils(filePath);
    }

    @DataProvider(name = "proxyTestData")
    public Object[][] getTestData() throws IOException {
        int rowCount = excel.getRowCount();
        Object[][] data = new Object[rowCount - 1][3]; // Adjust based on required columns

        for (int i = 1; i < rowCount; i++) {
            Map<String, Object> rowData = excel.getRowData(i);
            if ("N".equalsIgnoreCase((String) rowData.get("Skip"))) {
                data[i - 1][0] = rowData.get("Login UserName");
                data[i - 1][1] = rowData.get("IN-AccountName");
                data[i - 1][2] = rowData.get("IN-UpcomingVisits");
            }
        }
        return data;
    }

    @Test(dataProvider = "proxyTestData")
    public void executeProxyTests(String loginUser, String accountName, String expectedUpcomingVisit) {
        proxyPage.enterAccountName(accountName);
        boolean result = proxyPage.verifyUpcomingVisit(expectedUpcomingVisit);
        String testResult = result ? "Pass" : "Fail";
        excel.setCellData(rowIndex + 1, "O-UPcomingVisits", testResult); // Save results
    }

    @Then("I save the results back to the excel file")
    public void saveResults() throws IOException {
        excel.saveAndClose();
    }

    @After
    public void tearDown() {
        driver.quit();
    }
}
Setup Steps
Dependencies: Make sure to add the required dependencies in your pom.xml for Selenium, Cucumber, and Apache POI.
Driver Setup: Set the path for the ChromeDriver executable correctly in your environment or in your code.
Excel File: Place the ProxyDataSheet.xlsx file in the resources folder or update the file path in the code as needed.
Conclusion
With this implementation of the Selenium POM framework, you can organize your test cases effectively while leveraging data from an Excel file. The separation of concerns allows for easier maintenance and scalability, and the enhanced Excel utility provides robust interactions with your test data. This setup is ready for further enhancements as needed.